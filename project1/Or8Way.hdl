/*
 * Or8Way.hdl --- 8 way Or gate implementation.
 *
 * An N-way Or gate outputs 1 when at least one of its
 * N bit inputs is 1, and 0 otherwise. We walk through
 * the indexes of the input value and Or each pair, and
 * short circuit the process when one of the bits are 1.
 *
 * Function: out=Or(in[0], in[1],...in[N])
 *
 * First OR will compare be in[0] OR in[1],
 * the results is out0 (arbitrary name), second OR will
 * be in[2] OR in[3] with output of out1. We keep doing this
 * until we do in[6] OR in[7] as final set of first ORs.
 *
 * Now with this first pass of ORs done, we do round of ORs again
 * and the outputs (out0, out1, out2, out3), so 2 more ORs--
 * out0 OR out1, out2 OR out3. The ouput of these is fed into
 * a final OR before feeding to out.
 * C.D. MacEachern
 */

CHIP Or8Way {
   IN in[8];
   OUT out;

   PARTS:
   // Compare first two bits and output used
   // to check against next bit in put, all the
   // way through until the end.
   Or(a=in[0], b=in[1], out=out0);
   Or(a=out0, b=in[2], out=out1);
   Or(a=out1, b=in[3], out=out2);
   Or(a=out2, b=in[4], out=out3);
   Or(a=out3, b=in[5], out=out4);
   Or(a=out4, b=in[6], out=out5);
   Or(a=out5, b=in[7], out=out);
}
