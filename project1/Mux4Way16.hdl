/*
 * Mux4Way16.hdl -- 4-way 16bit mux gate implementation.
 *
 * Inputs: a[16], b[16], c[16], d[16], sel[2]
 *
 * We have 2 sel flags now (4 different combinations).
 *
 * sel[1]  sel[0]  out
 * 0       0       a
 * 0       1       b
 * 1       0       c
 * 1       1       d
 *
 * Function: If sel=00 then out=a else if sel=01 then out=b
 * else if sel=10 then out=c else if sel=11 then out=d
 * (all above assingment operations above are all 16bit,
 * out=a means 'for i=0..15 out[i]=a[i]')
 *
 * C.D. MacEachern
 */

CHIP Mux4Way16 {
   // sel[2] means 4 possible combinations
   IN a[16], b[16], c[16], d[16], sel[2];
   OUT out[16];

   PARTS:
   //        if sel=00 then out=a
   //   else if sel=01 then out=b
   //   else if sel=10 then out=c
   //   else if sel=11 then out=d

   /*
    * We don't care about the a,b,c,d values coming in. Focus on the each bit of
    * sel independently. First we do Mux16 using first bit of sel to eliminate of
    * of 2 inputs. We do this again on another 2 inputs using another Mux16, and
    * then we use a final Mux16 on the remainder signals from the previous two
    * Mux16 gates.
    *
    * Each Mux16 takes a 'a' and 'b' input so when send in 'c' and 'd' think of
    * them as 'a' and 'b' in regular Mux16 truth table, that will make things
    * easier to understand.
    *
    */

   Mux16(a=a, b=b, sel=sel[0], out=x);
   Mux16(a=c, b=d, sel=sel[0], out=y);
   Mux16(a=x, b=y, sel=sel[1], out=out);
}
