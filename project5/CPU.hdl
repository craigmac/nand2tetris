// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
   /* Tips: can be constructed according to Figure 5.9, using ALU and
   * Register (ARegister and DRegister) chips (use built-in ones for safety
   * and speed). They also provide GUI side effects when run, over user built
   * ones from Chapter 3. For Instruction memory, use the built-in ROM32K chip.
   */
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

   /* This schematic was built on suggested implementation from Chapter 5,
    * figure 5.9(?), just connected using correct 'c' bits (control bits
    * taken from 'instruction' line in and fanned to different components
    * simultaneously.
    *
    * If current instruction needs to write a value to M, i.e. Memory[A], the
    * current instruction needs to write a value to M, the value is place in
    * outM, the address of target in addressM output, and the writeM bit is
    * asserted.
    */
    PARTS:
    /* Incoming Instruction Handling:
    * e.g., Instruction "0000 1011 1011 1001" arrives, i.e., @3001 in symbolic
    * assembly. This instr seeks to load addr 3001 in ARegister.
    * First we need to separate into op-code and a 15-bit value. if
    * instruction[15] is 0 we store the entire 16 bits into A register.
    *
    * Control bits decoded:
    * instruction[0..2] = Jump bits
    * instruction[3..5] = Destination load bits
    * instruction[6..11] = ALU control bits
    * instruction[12..14] = ??? Not used??
    * instruction[15] = A or C flag
    */
    Mux16(a=instruction, b=outM, sel=instruction[15], out=AorCinstr);
    /* ARegister storage:
    * If instruction began with 0, then we need to assert the load bit to save
    * 'in' value to the ARegister, otherwise, load bit is not asserted the
    * previous value that was in ARegister remains. Either way the out is
    * fanned to be used in further processing and to 'addressM' out of CPU.
    */
    ARegister(in=AorCinstr, load=instruction[15], out=Aout, out=addressM);


   // D
   /* And(a=cd2, b=Cinst, out=Dload); */
   /* DRegister(in=ALUout, load=Dload, out=Dout); */

   // ALU
   /* Mux16(a=Aout, b=inM, sel=ca, out=AorM); */
   /* ALU(x=Dout, y=AorM, zx=cc1, nx=cc2, zy=cc3, ny=cc4, f=cc5, no=cc6, */
   /*     out=outM, zr=zr, ng=ng); */

   // PC/Jump
   /* Or(a=zr, b=ng, out=zrORng); */
   /* Not(in=zrORng, out=NotZrORng); */
   // 3 jump conditions
   /* And(a=cj1, b=ng, out=jumplt); */
   /* And(a=cj2, b=zr, out=jumpeq); */
   /* And(a=cj3, b=NotZrORng, out=jumpgt); */

   // Compute whether to jump
   /* Or(a=jumplt, b=jumpeq, out=jumpltORjumpeq); */
   /* Or(a=jumpltORjumpeq, b=jumpgt, out=maybejump); */

   /* Not(in=maybejump, out=maybeincrement); */
   /* PC(in=Aout, load=maybejump, inc=maybeincrement, reset=reset, out[0..14]=pc); */
}
