CHIP CPU {
   /* Tips: can be constructed according to Figure 5.9, using ALU and
   * Register (ARegister and DRegister) chips (use built-in ones for safety
   * and speed). They also provide GUI side effects when run, over user built
   * ones from Chapter 3. For Instruction memory, use the built-in ROM32K chip.
   */
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

   /* This schematic was built on suggested implementation from Chapter 5,
    * figure 5.9(?), just connected using correct 'c' bits (control bits
    * taken from 'instruction' line in and fanned to different components
    * simultaneously.
    *
    * If current instruction needs to write a value to M, i.e. Memory[A], the
    * current instruction needs to write a value to M, the value is place in
    * outM, the address of target in addressM output, and the writeM bit is
    * asserted.
    */
    PARTS:
    /* 1. Instruction Decoding:
    * Parse the instruction into its underlying fields, i.e., subsets of bits,
    * to be used as control bits simultaneously in various chips in the CPU.
    *
    * e.g., Instruction "0000 1011 1011 1001" arrives, i.e., @3001 in symbolic
    * assembly. This instr seeks to load addr 3001 in ARegister.
    * First we need to separate into op-code and a 15-bit value. if
    * instruction[15] is 0 we store the entire 16 bits into A register.
    *
    * Control bits decoded:
    * instruction[0..2] = Jump bits
    * instruction[3..5] = Destination load bits, act as the 'load' bit for
    * ARegister, DRegister and writeM output. Determines 'where' thing are
    * stored, by 'opening' the door, aka allowing the load of a value.
    * instruction[6..12] = ALU control bits, see ALU description, 1 bit for
    * each 6 inputs [6..11] and the instruction[12] is used a control bit
    * in a Mux16 later.
    * instruction[13..14] = both 1, not used in our system
    * instruction[15] = A or C flag, aka opcode
    *
    * instruction decoded: (bits 13..14 not used)
    *  bit position (MSB to LSB): 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
    *                              1  x  x  a  c  c c c c c d d d j j j
    *
    * bit 15: 1 means opcode C-instruction
    *         0 means A-instruction, store whole value as is don't take as
    *          a command.
    * xx: unused in our system, these are always 1 and not used.
    * a: a control bit for one of our Mux to decided whether to use A or M
    *    in our ALU computation with DRegister as the second argument.
    * ccc ccc: 6 bits corresponding to ALU in flags e.g. zx, nx, ny, ...
    * ddd: destination bits, bit 5 controls if we assert load bit on ARegister,
    *    bit 4 controls whether we assert load bit on DRegister, and bit 3
    *    controls what we select on a Mux to determine 'writeM' CPU out pin.
    * jjj: jump bits, each one asserts whether to jump on total of 8 different
    *       jumping conditions, e.g. jump is greater than x AND equal to y.
    */

   Mux16(a=instruction, b=ALUout, sel=instruction[15], out=MuxOut);
   Not(in=instruction[15], out=NotInstruction);
   Or(a=NotInstruction, b=instruction[5], out=Ainstruction);
   ARegister(in=MuxOut, load=Ainstruction, out=Aout, out[0..14]=addressM);

   /* DRegister storage:
    * This register takes in the ALU output, outM, the computed value of an
    * operation it peformed, and is controlled by a load bit, 'load', which is
    */
   And(a=instruction[15], b=instruction[4], out=Dload);
   DRegister(in=ALUoutD, load=Dload, out=Dout);

   /* 2. Instruction Execution:
    *
    * ALU chip: it is combinational, meaning it always computes something
    * ALU takes output of DRegister and either the output of ARegister or
    * the 'inM' signal (M is RAM[A], meaning value of selected mem register), based
    * on a Mux16 using control bits from the instruction signal.
    *
    * Do we pass ALU as second input ARegister output or 'inM'? Make decision
    * here with Mux16
    */
   Mux16(a=Aout, b=inM, sel=instruction[12], out=AorM);
   ALU(x=Dout, y=AorM,
       zx=instruction[11],
       nx=instruction[10],
       zy=instruction[9],
       ny=instruction[8],
       f=instruction[7],
       no=instruction[6],
       // computed value of selected memory address, RAM[A] aka M
       out=outM,
       out=ALUout,
       out=ALUoutD,
       zr=zero,
       ng=negative);

   /* Write to M? If it is an instruction and destbit set we do */
   And(a=instruction[15], b=instruction[3], out=writeM);

   /* 3. Next-Instruction Fetching:
    *
    * Program Counter (PC) and Jump conditions
    * We want to set the program counter to a new value, the address
    * where will jump to, if jump conditions have been set, otherwise
    * we simply output pc++.
    */
   Or(a=zero, b=negative, out=NotPositive);
   Not(in=NotPositive, out=positive);

   And(a=positive, b=instruction[0], out=j3);
   And(a=zero, b=instruction[1], out=j2);
   And(a=negative, b=instruction[2], out=j1);

   /* If any of the jump condition were true then we need to alter the PC */
   Or(a=j1, b=j2, out=j1j2);
   Or(a=j1j2, b=j3, out=j1j2j3);

   And(a=j1j2j3, b=instruction[15], out=doJump);
   PC(in=Aout, load=doJump, inc=true, reset=reset, out[0..14]=pc);
}
