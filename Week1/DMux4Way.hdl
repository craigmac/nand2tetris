/*
 * DMux4Way.hdl -- 4 Way DMux implementation.
 *
 * sel[2] (2bit flag):
 * [1] [0] out signals
 * 1    0  a=in, b=0, c=0, d=0
 * 1    1  a=0, b=in, c=0, d=0
 * 0    1  a=0, b=0, c=in, d=0
 * 0    0  a=0, b=0, c=0, d=in
 *
 * Think like a railroad track analogy:
 *
 * //              ========== a
 * //        ====+ ========= b
 * // ======+
 * //        ====+ ========= c
 * //              ========= d
 *
 * Where sel[1] bit controls whether we take a,b path or
 * c,d path and sel[0] then decides either a or b, or if
 * on the other path, c or d.
 *
 * C.D. MacEachern
 */

CHIP DMux4Way {
  IN in, sel[2];
  OUT a, b, c, d;

  PARTS:
    Dmux(in=in, sel[1], out=pathab, pathcd); // if sel[1] is 0 ->pathab
    // output to either a or b if pathab was chosen
    Dmux(in=pathab, sel[0], out=a, b);
    // output to either c or d if pathcd was chosen
    Dmux(in=pathcd, sel[0], out=c, d);
    
}