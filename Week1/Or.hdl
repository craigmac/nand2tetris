/*
 * Or.hdl --- 'Or' chip/gate logic using Nand.
 *
 * And, Not, & Or can be replaced with Nand only
 * to reduce needed chips (but reduces clarity
 * when things get more complex!)
 *
 * Or truth table: (return 1 when either a or b is 1)
 * a  b  out
 * 0  0  0
 * 0  1  1
 * 1  0  1
 * 1  1  1
 *
 * We will replace Or by using Not & And, e.g.:
 * (x OR y) == Not(Not(x) And Not(y))
 * While harder to decifer, it delivers the same
 * functionality. Furthermore, we can then
 * replace And and Not with Nand. But his might get
 * super hairy as you can see here how unclear it
 * gets:
 * (x OR y) == Not(Not(x) And Not(y)) =>
 * Not((x Nand x) And (y Nand y)) =>
 * Not(Not((x Nand x) Nand (y Nand y))) =>
 * Not(((x Nand x) Nand (y Nand y)) Nand ((x Nand x) Nand (y Nand y))) =>
 * ...you can see how ridiculously long and incomprehensible this gets...
 * you will end up with something like 14 Nand gates to replace an Or.
 * 
 * we will stick with using Not and And instead of replace them with
 * Nand gates.
 * 
 * C.D. MacEachern
 */

CHIP Or {
  IN a,b;
  OUT out;

  PARTS:
    Not(in=a,out=xout);
    Not(in=b,out=yout);
    And(a=xout,b=yout,out=andout);
    Not(in=andout,out=out);
}